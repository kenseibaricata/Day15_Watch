{"ast":null,"code":"var _jsxFileName = \"/Users/kensei/Desktop/\\u30AB\\u30EA\\u30AD\\u30E5\\u30E9\\u30E0/Day15/src/components/AlarmTab.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STORAGE_KEY = 'reactClockAlarmSettings';\nconst AlarmTab = () => {\n  _s();\n  const [alarmState, setAlarmState] = useState({\n    isSet: false,\n    time: ''\n  });\n  const [alarmStatus, setAlarmStatus] = useState('');\n  const alarmSoundRef = useRef(null);\n  const timeInputRef = useRef(null);\n\n  // localStorageからアラーム設定を読み込む\n  useEffect(() => {\n    try {\n      const savedState = localStorage.getItem(STORAGE_KEY);\n      if (savedState) {\n        const parsedState = JSON.parse(savedState);\n        setAlarmState(parsedState);\n        if (parsedState.isSet) {\n          setAlarmStatus(`アラーム設定: ${formatAlarmTime(parsedState.time)}`);\n        }\n      }\n    } catch (error) {\n      console.error('アラーム設定の読み込みに失敗しました:', error);\n    }\n  }, []);\n\n  // アラームの確認\n  useEffect(() => {\n    let intervalId;\n    if (alarmState.isSet) {\n      // 10秒ごとに確認（過負荷防止のため）\n      intervalId = window.setInterval(() => {\n        checkAlarm();\n      }, 10000);\n\n      // 初回チェック\n      checkAlarm();\n    }\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n      stopAlarmSound();\n    };\n  }, [alarmState]);\n\n  // アラームのチェック\n  const checkAlarm = () => {\n    if (!alarmState.isSet || !alarmState.time) {\n      return;\n    }\n    const now = new Date();\n    const currentHours = now.getHours().toString().padStart(2, '0');\n    const currentMinutes = now.getMinutes().toString().padStart(2, '0');\n    const currentTimeStr = `${currentHours}:${currentMinutes}`;\n    if (currentTimeStr === alarmState.time) {\n      triggerAlarm();\n    }\n  };\n\n  // アラームの発動\n  const triggerAlarm = () => {\n    playAlarmSound();\n    showNotification();\n    setAlarmStatus('⚠️ アラーム発動中！');\n  };\n\n  // アラーム音の再生\n  const playAlarmSound = () => {\n    if (alarmSoundRef.current) {\n      alarmSoundRef.current.loop = true;\n      alarmSoundRef.current.play().catch(error => {\n        console.error('アラーム音の再生に失敗しました:', error);\n      });\n    }\n  };\n\n  // アラーム音の停止\n  const stopAlarmSound = () => {\n    if (alarmSoundRef.current) {\n      alarmSoundRef.current.pause();\n      alarmSoundRef.current.currentTime = 0;\n    }\n  };\n\n  // 通知の表示\n  const showNotification = () => {\n    if (!('Notification' in window)) {\n      return;\n    }\n    if (Notification.permission === 'granted') {\n      new Notification('React Clock Alarm', {\n        body: 'アラーム時刻になりました！',\n        icon: '/favicon.ico'\n      });\n    } else if (Notification.permission !== 'denied') {\n      Notification.requestPermission();\n    }\n  };\n\n  // アラームのセット\n  const setAlarm = () => {\n    if (!timeInputRef.current || !timeInputRef.current.value) {\n      return;\n    }\n    const newAlarmState = {\n      isSet: true,\n      time: timeInputRef.current.value\n    };\n    setAlarmState(newAlarmState);\n    setAlarmStatus(`アラーム設定完了: ${formatAlarmTime(newAlarmState.time)}`);\n\n    // localStorageに保存\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(newAlarmState));\n    } catch (error) {\n      console.error('アラーム設定の保存に失敗しました:', error);\n    }\n  };\n\n  // アラームのキャンセル\n  const cancelAlarm = () => {\n    var _timeInputRef$current;\n    const newAlarmState = {\n      isSet: false,\n      time: ((_timeInputRef$current = timeInputRef.current) === null || _timeInputRef$current === void 0 ? void 0 : _timeInputRef$current.value) || ''\n    };\n    setAlarmState(newAlarmState);\n    setAlarmStatus('');\n    stopAlarmSound();\n\n    // localStorageに保存\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(newAlarmState));\n    } catch (error) {\n      console.error('アラーム設定の保存に失敗しました:', error);\n    }\n  };\n\n  // HH:MM形式を見やすく変換\n  const formatAlarmTime = timeStr => {\n    if (!timeStr) return '';\n    const [hours, minutes] = timeStr.split(':');\n    if (!hours || !minutes) return timeStr;\n    const hoursNum = parseInt(hours, 10);\n    const ampm = hoursNum >= 12 ? 'PM' : 'AM';\n    const hours12 = hoursNum % 12 || 12;\n    return `${ampm} ${hours12}:${minutes}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tab-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alarm-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-picker\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          ref: timeInputRef,\n          defaultValue: alarmState.time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alarm-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setAlarm,\n          disabled: alarmState.isSet,\n          children: \"\\u30A2\\u30E9\\u30FC\\u30E0\\u3092\\u30BB\\u30C3\\u30C8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: cancelAlarm,\n          disabled: !alarmState.isSet,\n          children: \"\\u30AD\\u30E3\\u30F3\\u30BB\\u30EB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alarm-status\",\n        children: alarmStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: alarmSoundRef,\n      src: \"https://assets.mixkit.co/sfx/preview/mixkit-alarm-digital-clock-beep-989.mp3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(AlarmTab, \"QPAK1Yhg7XH7niHa0PNh0P/mWvc=\");\n_c = AlarmTab;\nexport default AlarmTab;\nvar _c;\n$RefreshReg$(_c, \"AlarmTab\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","STORAGE_KEY","AlarmTab","_s","alarmState","setAlarmState","isSet","time","alarmStatus","setAlarmStatus","alarmSoundRef","timeInputRef","savedState","localStorage","getItem","parsedState","JSON","parse","formatAlarmTime","error","console","intervalId","window","setInterval","checkAlarm","clearInterval","stopAlarmSound","now","Date","currentHours","getHours","toString","padStart","currentMinutes","getMinutes","currentTimeStr","triggerAlarm","playAlarmSound","showNotification","current","loop","play","catch","pause","currentTime","Notification","permission","body","icon","requestPermission","setAlarm","value","newAlarmState","setItem","stringify","cancelAlarm","_timeInputRef$current","timeStr","hours","minutes","split","hoursNum","parseInt","ampm","hours12","className","children","type","ref","defaultValue","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","src","_c","$RefreshReg$"],"sources":["/Users/kensei/Desktop/カリキュラム/Day15/src/components/AlarmTab.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\ninterface AlarmState {\n  isSet: boolean;\n  time: string; // HH:MM形式\n}\n\nconst STORAGE_KEY = 'reactClockAlarmSettings';\n\nconst AlarmTab: React.FC = () => {\n  const [alarmState, setAlarmState] = useState<AlarmState>({\n    isSet: false,\n    time: ''\n  });\n  const [alarmStatus, setAlarmStatus] = useState<string>('');\n  const alarmSoundRef = useRef<HTMLAudioElement>(null);\n  const timeInputRef = useRef<HTMLInputElement>(null);\n\n  // localStorageからアラーム設定を読み込む\n  useEffect(() => {\n    try {\n      const savedState = localStorage.getItem(STORAGE_KEY);\n      if (savedState) {\n        const parsedState = JSON.parse(savedState) as AlarmState;\n        setAlarmState(parsedState);\n        if (parsedState.isSet) {\n          setAlarmStatus(`アラーム設定: ${formatAlarmTime(parsedState.time)}`);\n        }\n      }\n    } catch (error) {\n      console.error('アラーム設定の読み込みに失敗しました:', error);\n    }\n  }, []);\n\n  // アラームの確認\n  useEffect(() => {\n    let intervalId: number;\n    \n    if (alarmState.isSet) {\n      // 10秒ごとに確認（過負荷防止のため）\n      intervalId = window.setInterval(() => {\n        checkAlarm();\n      }, 10000);\n      \n      // 初回チェック\n      checkAlarm();\n    }\n    \n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n      stopAlarmSound();\n    };\n  }, [alarmState]);\n\n  // アラームのチェック\n  const checkAlarm = () => {\n    if (!alarmState.isSet || !alarmState.time) {\n      return;\n    }\n    \n    const now = new Date();\n    const currentHours = now.getHours().toString().padStart(2, '0');\n    const currentMinutes = now.getMinutes().toString().padStart(2, '0');\n    const currentTimeStr = `${currentHours}:${currentMinutes}`;\n    \n    if (currentTimeStr === alarmState.time) {\n      triggerAlarm();\n    }\n  };\n\n  // アラームの発動\n  const triggerAlarm = () => {\n    playAlarmSound();\n    showNotification();\n    setAlarmStatus('⚠️ アラーム発動中！');\n  };\n\n  // アラーム音の再生\n  const playAlarmSound = () => {\n    if (alarmSoundRef.current) {\n      alarmSoundRef.current.loop = true;\n      alarmSoundRef.current.play().catch(error => {\n        console.error('アラーム音の再生に失敗しました:', error);\n      });\n    }\n  };\n\n  // アラーム音の停止\n  const stopAlarmSound = () => {\n    if (alarmSoundRef.current) {\n      alarmSoundRef.current.pause();\n      alarmSoundRef.current.currentTime = 0;\n    }\n  };\n\n  // 通知の表示\n  const showNotification = () => {\n    if (!('Notification' in window)) {\n      return;\n    }\n    \n    if (Notification.permission === 'granted') {\n      new Notification('React Clock Alarm', {\n        body: 'アラーム時刻になりました！',\n        icon: '/favicon.ico'\n      });\n    } else if (Notification.permission !== 'denied') {\n      Notification.requestPermission();\n    }\n  };\n\n  // アラームのセット\n  const setAlarm = () => {\n    if (!timeInputRef.current || !timeInputRef.current.value) {\n      return;\n    }\n    \n    const newAlarmState = {\n      isSet: true,\n      time: timeInputRef.current.value\n    };\n    \n    setAlarmState(newAlarmState);\n    setAlarmStatus(`アラーム設定完了: ${formatAlarmTime(newAlarmState.time)}`);\n    \n    // localStorageに保存\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(newAlarmState));\n    } catch (error) {\n      console.error('アラーム設定の保存に失敗しました:', error);\n    }\n  };\n\n  // アラームのキャンセル\n  const cancelAlarm = () => {\n    const newAlarmState = {\n      isSet: false,\n      time: timeInputRef.current?.value || ''\n    };\n    \n    setAlarmState(newAlarmState);\n    setAlarmStatus('');\n    stopAlarmSound();\n    \n    // localStorageに保存\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(newAlarmState));\n    } catch (error) {\n      console.error('アラーム設定の保存に失敗しました:', error);\n    }\n  };\n\n  // HH:MM形式を見やすく変換\n  const formatAlarmTime = (timeStr: string): string => {\n    if (!timeStr) return '';\n    \n    const [hours, minutes] = timeStr.split(':');\n    if (!hours || !minutes) return timeStr;\n    \n    const hoursNum = parseInt(hours, 10);\n    const ampm = hoursNum >= 12 ? 'PM' : 'AM';\n    const hours12 = hoursNum % 12 || 12;\n    \n    return `${ampm} ${hours12}:${minutes}`;\n  };\n\n  return (\n    <div className=\"tab-content\">\n      <div className=\"alarm-container\">\n        <div className=\"time-picker\">\n          <input \n            type=\"time\" \n            ref={timeInputRef}\n            defaultValue={alarmState.time}\n          />\n        </div>\n        <div className=\"alarm-controls\">\n          <button \n            onClick={setAlarm}\n            disabled={alarmState.isSet}\n          >\n            アラームをセット\n          </button>\n          <button \n            onClick={cancelAlarm}\n            disabled={!alarmState.isSet}\n          >\n            キャンセル\n          </button>\n        </div>\n        <div className=\"alarm-status\">{alarmStatus}</div>\n      </div>\n      <audio \n        ref={alarmSoundRef}\n        src=\"https://assets.mixkit.co/sfx/preview/mixkit-alarm-digital-clock-beep-989.mp3\"\n      />\n    </div>\n  );\n};\n\nexport default AlarmTab; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}